{
  "version": "1.0",
  "package": {
    "name": "Odometer",
    "version": "1.0.0",
    "description": "Gets Robot's Position.",
    "author": "Muhammad Taha Suhail",
    "image": "%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20368%20368%22%3E%3Cpath%20d=%22M184%208c97.2%200%20176%2078.8%20176%20176s-78.8%20176-176%20176S8%20281.2%208%20184%2086.8%208%20184%208zm110.88%20240c10.88-18.8%2017.12-40.64%2017.12-64%200-70.72-57.28-128-128-128S56%20113.28%2056%20184c0%2023.36%206.24%2045.2%2017.12%2064%2022.08%2038.24%2063.52%2064%20110.88%2064s88.8-25.76%20110.88-64z%22%20fill=%22#cce4ff%22/%3E%3Cg%20fill=%22#007aff%22%3E%3Cpath%20d=%22M184%200C82.544%200%200%2082.544%200%20184s82.544%20184%20184%20184%20184-82.544%20184-184S285.456%200%20184%200zm0%20352c-92.64%200-168-75.36-168-168S91.36%2016%20184%2016s168%2075.36%20168%20168-75.36%20168-168%20168z%22/%3E%3Cpath%20d=%22M280.136%2087.864c-.032-.032-.08-.04-.112-.072C255.408%2063.216%20221.448%2048%20184%2048s-71.408%2015.216-96.024%2039.784c-.032.032-.08.04-.112.072s-.04.08-.072.112C63.216%20112.592%2048%20146.552%2048%20184c0%2023.92%206.288%2047.424%2018.184%2067.984%200%20.008%200%20.016.008.016%2024.216%2041.944%2069.36%2068%20117.808%2068s93.592-26.056%20117.808-68c0-.008%200-.016.008-.016C313.712%20231.424%20320%20207.92%20320%20184c0-37.448-15.216-71.408-39.784-96.024-.04-.032-.048-.08-.08-.112zM264%20192h39.512c-1.12%2016.792-5.528%2033.192-13.352%2048H77.832c-7.824-14.808-12.232-31.208-13.352-48H104c4.416%200%208-3.584%208-8s-3.584-8-8-8H64.408c1.8-27.064%2012.552-51.656%2029.392-70.888l27.984%2027.984c1.56%201.56%203.608%202.344%205.656%202.344s4.096-.784%205.656-2.344a7.991%207.991%200%200%200%200-11.312L105.112%2093.8C124.344%2076.96%20148.936%2066.2%20176%2064.408V104c0%204.416%203.584%208%208%208s8-3.584%208-8V64.408c27.064%201.8%2051.656%2012.552%2070.888%2029.392l-68.6%2068.6c-3.168-1.52-6.64-2.4-10.288-2.4-13.232%200-24%2010.768-24%2024s10.768%2024%2024%2024%2024-10.768%2024-24c0-3.664-.888-7.144-2.392-10.296l68.592-68.592c16.84%2019.232%2027.6%2043.824%2029.392%2070.888H264c-4.416%200-8%203.584-8%208s3.584%208%208%208zm-85.912-2.728c-.592-.664-1.12-1.376-1.464-2.208.328.8.856%201.528%201.464%202.208zm-1.472-8.336c.344-.832.88-1.544%201.464-2.208-.6.68-1.128%201.408-1.464%202.208zm4.32%2010.448c-.832-.344-1.544-.88-2.208-1.464.68.6%201.408%201.128%202.208%201.464zm8.336-1.472c-.664.592-1.376%201.12-2.208%201.464.8-.328%201.528-.856%202.208-1.464zM184%20304c-37.904%200-73.488-18.104-95.968-48h191.936c-22.48%2029.896-58.064%2048-95.968%2048z%22/%3E%3C/g%3E%3C/svg%3E"
  },
  "design": {
    "board": "Python3-Noetic",
    "graph": {
      "blocks": [

        {
          "id": "Enable-0",
          "type": "basic.input",
          "data": {
            "name": "E",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },


        {
          "id": "Out-0",
          "type": "basic.output",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 752,
            "y": 134
          }
        },
        
       {
          "id": "300",
          "type": "basic.code",
          "data": {
            "code": "#!/usr/bin/env python3\n\nimport numpy as np\nimport rospy\nfrom turtlesim.msg import Pose\nfrom time import sleep\nfrom utils.wires.wire_str import read_string, share_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\nx, y, yaw = 0.0, 0.0, 0.0\n\ndef callback(msg):\n    \n    global x, y, yaw\n    x = msg.x\n    y = msg.y\n    yaw = msg.theta\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    output_0 = share_string(output_wires[0])\n    rospy.init_node(\"odometerVC\", anonymous=True)\n    odometer_subscriber = rospy.Subscriber(parameters[1], Pose, callback)\n    \n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[0])\n    except IndexError:\n        enabled = True\n\n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n\n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    try:\n    \n        while not rospy.is_shutdown():\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n        \n                data = []\n                data.extend((str(x), str(y), str(yaw)))\n                to_write = np.array(data, dtype='<U6')\n                output_0.add(to_write)\n                control_data[0] += 1\n                \n            sleep(control_data[1])\n\n    except KeyboardInterrupt:\n    \n        output_0.release()\n        enable_wire.release()\n",
            "ports": {
              "in": [
                {
                  "name": "Enable-0"
                }
              ],
              "out": [
                {
                  "name": "Out-0"
                }
              ]
            }
          },
          "position": {
            "x": 50,
            "y": 100
          },
          "size": {
            "width": 800,
            "height": 600
          }
        },
        
        {
          "id": "400",
          "type": "basic.constant",
          "data": {
            "name": "Frequency", 
            "value": "30.0",
            "local": true
          },
          "position": {
            "x": 300,
            "y": 10
          }
        },     
        
        {
          "id": "401",
          "type": "basic.constant",
          "data": {
            "name": "ROS Topic", 
            "value": "/robot/pose",
            "local": true
          },
          "position": {
            "x": 400,
            "y": 10
          }
        }
        
      ],
      "wires": [
        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "200",
            "port": "out"
          }
        }
      ]
    }
  },
  "dependencies": {}
}
