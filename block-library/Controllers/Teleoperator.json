{
  "version": "1.0",
  "package": {
    "name": "Teleoperator",
    "version": "1.0.0",
    "description": "Teleoperation using Face Movement.",
    "author": "Muhammad Taha Suhail",
    "image": "%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20512%20512%22%3E%3Cpath%20d=%22M512%2095.39v321.221c0%2018.489-15%2033.489-33.5%2033.489H33.488C14.989%20450.1%200%20435.099%200%20416.612V95.39c0-18.5%2014.989-33.488%2033.488-33.488h445.013C497%2061.901%20512%2076.891%20512%2095.39z%22%20fill=%22#eaeaea%22/%3E%3Cpath%20d=%22M512%2095.388v52.585H.002V95.388c0-18.5%2014.989-33.488%2033.488-33.488H478.5C497%2061.899%20512%2076.888%20512%2095.388z%22%20fill=%22#fcc63d%22/%3E%3Ccircle%20cx=%2253.353%22%20cy=%22104.092%22%20r=%2217.248%22%20fill=%22#f9572b%22/%3E%3Ccircle%20cx=%22111.428%22%20cy=%22104.092%22%20r=%2217.248%22%20fill=%22#bcbcbc%22/%3E%3Ccircle%20cx=%22169.493%22%20cy=%22104.092%22%20r=%2217.248%22%20fill=%22#45b8c4%22/%3E%3Cpath%20d=%22M68.967%20426.338a7.837%207.837%200%200%201-7.837-7.837V176.084a7.837%207.837%200%200%201%2015.674%200v242.417a7.838%207.838%200%200%201-7.837%207.837z%22%20fill=%22#424c59%22/%3E%3Ccircle%20cx=%2268.963%22%20cy=%22256.543%22%20r=%2222.988%22%20fill=%22#f9572b%22/%3E%3Cpath%20d=%22M139.497%20426.338a7.837%207.837%200%200%201-7.837-7.837V176.084a7.837%207.837%200%200%201%2015.674%200v242.417a7.837%207.837%200%200%201-7.837%207.837z%22%20fill=%22#424c59%22/%3E%3Ccircle%20cx=%22139.494%22%20cy=%22323.762%22%20r=%2222.988%22%20fill=%22#f9572b%22/%3E%3Cpath%20d=%22M210.028%20426.338a7.837%207.837%200%200%201-7.837-7.837V176.084a7.837%207.837%200%200%201%2015.674%200v242.417a7.837%207.837%200%200%201-7.837%207.837z%22%20fill=%22#424c59%22/%3E%3Ccircle%20cx=%22210.025%22%20cy=%22366.258%22%20r=%2222.988%22%20fill=%22#f9572b%22/%3E%3Cpath%20d=%22M467.074%20213.178H288.397a7.837%207.837%200%200%201%200-15.674h178.678a7.837%207.837%200%201%201-.001%2015.674z%22%20fill=%22#424c59%22/%3E%3Cpath%20d=%22M376.168%20223.104h-55.209a7.037%207.037%200%200%201-7.037-7.037v-21.453a7.037%207.037%200%200%201%207.037-7.037h55.209a7.037%207.037%200%200%201%207.037%207.037v21.453a7.038%207.038%200%200%201-7.037%207.037z%22%20fill=%22#45b8c4%22/%3E%3Cpath%20d=%22M467.074%20275.872H288.397a7.837%207.837%200%200%201%200-15.674h178.678a7.837%207.837%200%201%201-.001%2015.674z%22%20fill=%22#424c59%22/%3E%3Cpath%20d=%22M438.865%20285.798h-55.209a7.037%207.037%200%200%201-7.037-7.037v-21.453a7.037%207.037%200%200%201%207.037-7.037h55.209a7.037%207.037%200%200%201%207.037%207.037v21.453a7.036%207.036%200%200%201-7.037%207.037z%22%20fill=%22#45b8c4%22/%3E%3Cpath%20fill=%22#fcc63d%22%20d=%22M294.662%20325.507H473.34v87.96H294.662z%22/%3E%3Cpath%20d=%22M341.685%20400.215a7.838%207.838%200%200%201-6.579-3.58l-9.177-14.183h-31.263a7.837%207.837%200%200%201%200-15.674h35.527a7.838%207.838%200%200%201%206.58%203.58l4.041%206.244%2014.762-29.525a7.837%207.837%200%200%201%2014.243.49l11.635%2027.923%2014.844-12.085a7.838%207.838%200%200%201%2010.096.168l16.081%2014.012%2011.01-34.604a7.836%207.836%200%200%201%2014.647-.766l12.574%2028.741h12.638a7.837%207.837%200%200%201%200%2015.674h-17.763a7.836%207.836%200%200%201-7.18-4.696l-6.289-14.376-8.321%2026.15a7.835%207.835%200%200%201-5.355%205.17%207.84%207.84%200%200%201-7.261-1.637l-20.102-17.515-17.868%2014.548a7.835%207.835%200%200%201-12.182-3.063l-9.087-21.811-13.241%2026.481a7.838%207.838%200%200%201-7.01%204.334z%22%20fill=%22#f9572b%22/%3E%3Cpath%20d=%22M473.344%20421.296H294.666a7.837%207.837%200%200%201-7.837-7.837v-87.956a7.837%207.837%200%200%201%207.837-7.837h178.678a7.837%207.837%200%200%201%207.837%207.837v87.956a7.837%207.837%200%200%201-7.837%207.837zm-170.841-15.674h163.004V333.34H302.503v72.282z%22%20fill=%22#239999%22/%3E%3C/svg%3E"
  },
  "design": {
    "board": "Python3-Noetic",
    "graph": {
      "blocks": [

        {
          "id": "Inp-0",
          "type": "basic.input",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },

        {
          "id": "Inp-1",
          "type": "basic.input",
          "data": {
            "name": "E",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },


        {
          "id": "Out-0",
          "type": "basic.output",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 752,
            "y": 144
          }
        },
        
       {
          "id": "300",
          "type": "basic.code",
          "data": {
            "code": "import numpy as np\nfrom time import sleep\nfrom utils.wires.wire_str import read_string, share_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    input_0 = read_string(input_wires[0])\n    output_0 = share_string(output_wires[0])\n    linear_velocity = float(parameters[1])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[1])\n    except IndexError:\n        enabled = True\n\n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n\n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    try:\n    \n        while True:\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                msg = input_0.get()\n        \n                # (x, y, width, height)\n                x, y = float(msg[0]), float(msg[1])\n                x1, y1 = x+float(msg[2]), y+float(msg[3])\n                \n                # Teleoperator Control Logic\n                \n                cx = (x+x1)/2.0\n                \n                if cx < 320:\n                    angular_velocity = -0.5\n                else:\n                    angular_velocity = 0.5\n                \n                data = []\n                data.extend((str(linear_velocity), str(angular_velocity)))\n                to_write = np.array(data, dtype='<U6')\n                output_0.add(to_write)\n                \n                control_data[0] += 1\n                \n            sleep(control_data[1])\n\n    except KeyboardInterrupt:\n    \n        input_0.release()\n        output_0.release()\n        enable_wire.release()",
            "ports": {
              "in": [
                {
                  "name": "Inp-0"
                }
              ],
              "out": [
                {
                  "name": "Out-0"
                }
              ]
            }
          },
          "position": {
            "x": 50,
            "y": 100
          },
          "size": {
            "width": 800,
            "height": 600
          }
        },
        
        {
          "id": "400",
          "type": "basic.constant",
          "data": {
            "name": "Frequency", 
            "value": "30.0",
            "local": true
          },
          "position": {
            "x": 300,
            "y": 10
          }
        },     
        
        {
          "id": "401",
          "type": "basic.constant",
          "data": {
            "name": "Linear Velocity", 
            "value": "5.0",
            "local": true
          },
          "position": {
            "x": 400,
            "y": 10
          }
        }
        
      ],

      "wires": [
        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "",
            "port": ""
          }
        },

        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "",
            "port": ""
          }
        }
      ]
    }
  },
  "dependencies": {}
}
