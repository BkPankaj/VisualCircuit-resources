{
  "version": "1.0",
  "package": {
    "name": "Threshold",
    "version": "1.0.0",
    "description": "Thresholds an image.",
    "author": "Muhammad Taha Suhail",
    "image": "%3Csvg%20height=%22512%22%20viewBox=%220%200%20506.1%20506.1%22%20width=%22512%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20d=%22M489.609%200H16.491C7.383%200%200%207.383%200%2016.491v473.118c0%209.107%207.383%2016.491%2016.491%2016.491h473.118c9.107%200%2016.491-7.383%2016.491-16.491V16.491C506.1%207.383%20498.716%200%20489.609%200z%22%20fill=%22#aced70%22/%3E%3Cpath%20d=%22M306.827%20146.374C214.493%20102.712%2083.675%20137.375%200%20168.746v320.863c0%209.107%207.383%2016.491%2016.491%2016.491h473.118c9.107%200%2016.491-7.383%2016.491-16.491V143.524c-49.714%2023.302-121.26%2039.74-199.273%202.85z%22%20fill=%22#9bd65e%22/%3E%3Cpath%20d=%22M506.1%20489.609V325.587c-27.896-15.857-243.388-119.388-413.146-8.53C57.604%20340.141%2026.755%20354.552%200%20362.812v126.797c0%209.107%207.383%2016.491%2016.491%2016.491h473.118c9.107%200%2016.491-7.384%2016.491-16.491z%22%20fill=%22#91c656%22/%3E%3Cpath%20d=%22M489.609%20506.1H16.491C7.383%20506.1%200%20498.716%200%20489.609V16.491C0%207.383%207.383%200%2016.491%200H489.61c9.107%200%2016.49%207.383%2016.49%2016.491v473.118c0%209.107-7.383%2016.491-16.491%2016.491zM32.981%20473.118h440.138V32.981H32.981z%22/%3E%3Cpath%20d=%22M85.115%20285.621c11.935%2011.936%2031.988-.515%2026.409-16.571h32.196v125.255c-16.066-5.581-28.498%2014.484-16.571%2026.409l21.258%2021.258c6.248%206.248%2016.379%206.248%2022.627%200l21.258-21.258c11.934-11.933-.512-31.988-16.571-26.409V269.05h20.655c8.811%2045.252%2018.704%20100%2051.558%20100%2032.698%200%2042.556-53.77%2051.559-100h50.279c8.923%2045.82%2018.784%20100%2051.559%20100%208.837%200%2016-7.164%2016-16%200-8.229-6.213-15.007-14.204-15.9-9.346-9.723-18.108-54.81-20.743-68.1h12.194c-5.582%2016.066%2014.486%2028.496%2026.409%2016.571l21.258-21.257c6.249-6.249%206.249-16.379%200-22.628l-21.258-21.257c-11.932-11.934-31.988.513-26.409%2016.571H376.19c-8.922-45.82-18.785-100-51.559-100-32.698%200-42.557%2053.77-51.559%20100h-50.277c-9.301-47.77-18.728-94.998-47.075-99.638v-25.617c16.064%205.58%2028.499-14.483%2016.571-26.409l-21.258-21.258c-6.248-6.248-16.379-6.248-22.627%200l-21.258%2021.258c-11.934%2011.933.512%2031.988%2016.571%2026.409V237.05h-32.196c5.582-16.065-14.485-28.497-26.409-16.571l-21.258%2021.257c-6.249%206.249-6.249%2016.379%200%2022.628zm162.818%2049.148c-8.644-13.57-15.79-49.799-18.946-65.719h37.894c-3.143%2015.845-10.298%2052.145-18.948%2065.719zm76.698-163.439c8.647%2013.569%2015.796%2049.824%2018.948%2065.72h-37.896c3.146-15.868%2010.298-52.147%2018.948-65.72zm-148.911%209.244c6.188%2015.611%2011.117%2039.595%2014.464%2056.476H175.72z%22/%3E%3C/svg%3E"
  },
  "design": {
    "board": "Python3-Noetic",
    "graph": {
      "blocks": [

        {
          "id": "Inp-0",
          "type": "basic.input",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },

        {
          "id": "Inp-1",
          "type": "basic.input",
          "data": {
            "name": "E",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },


        {
          "id": "Out-0",
          "type": "basic.output",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 752,
            "y": 144
          }
        },
        
       {
          "id": "300",
          "type": "basic.code",
          "data": {
            "code": "import cv2 as cv\nimport numpy as np\nfrom time import sleep\nfrom utils.wires.wire_img import share_image, read_image\nfrom utils.wires.wire_str import read_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    input_0 = read_image(input_wires[0])\n    output_0 = share_image(output_wires[0])\n\n    # Parameters\n    thresh_value = int(parameters[1])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[1])\n    except IndexError:\n        enabled = True\n    \n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n    \n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n        \n    try:\n    \n        while True:\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                frame = input_0.get()\n                \n                if frame is not None:\n\n                    vc.thresh(import cv2 as cv\nimport numpy as np\nfrom time import sleep\nfrom utils.wires.wire_img import share_image, read_image\nfrom utils.wires.wire_str import read_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    input_0 = read_image(input_wires[0])\n    output_0 = share_image(output_wires[0])\n\n    # Parameters\n    kernel = tuple([int(x.strip()) for x in parameters[1].split(',')])\n    kernel = np.ones(kernel, np.uint8)\n    iters = int(parameters[2])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[1])\n    except IndexError:\n        enabled = True\n    \n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n    \n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n        \n    try:\n    \n        while True:\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n\n                frame = input_0.get()\n                \n                if frame is not None:\n\n                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n                    eroded = cv2.erode(frame, kernel, iterations = iters)\n                    eroded = cv2.cvtColor(eroded, cv2.COLOR_GRAY2BGR)\n                    output_0.add(eroded)\n\n                    control_data[0] += 1\n                        \n            sleep(control_data[1])\n            \n    except KeyboardInterrupt: \n    \n        input_0.release()\n        enable_wire.release()\n        output_0.release())\n                    control_data[0] += 1\n                        \n            sleep(control_data[1])\n            \n    except KeyboardInterrupt: \n    \n        input_0.release()\n        enable_wire.release()\n        output_0.release()",
            "params": [],
            "ports": {
              "in": [
                {
                  "name": "Inp-0"
                }
              ],
              "out": [
                {
                  "name": "Out-0"
                }
              ]
            }
          },
          "position": {
            "x": 50,
            "y": 100
          },
          "size": {
            "width": 800,
            "height": 600
          }
        },
        
        {
          "id": "400",
          "type": "basic.constant",
          "data": {
            "name": "Frequency", 
            "value": "30.0",
            "local": true
          },
          "position": {
            "x": 300,
            "y": 10
          }
        },    
        
        {
          "id": "401",
          "type": "basic.constant",
          "data": {
            "name": "Threshold Value",
            "value": "127",
            "local": true
          },
          "position": {
            "x": 400,
            "y": 10
          }
        }
        
      ],

      "wires": [
        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "",
            "port": ""
          }
        },

        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "",
            "port": ""
          }
        }
      ]
    }
  },
  "dependencies": {}
}
