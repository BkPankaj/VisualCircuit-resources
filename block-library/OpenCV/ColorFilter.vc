{
  "version": "1.0",
  "package": {
    "name": "ColorFilter",
    "version": "1.0.0",
    "description": "Filters a Color in an Image",
    "author": "Muhammad Taha Suhail",
    "image": "%3Csvg%20height=%22512%22%20viewBox=%220%200%20500.238%20500.238%22%20width=%22512%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20d=%22M462.702%20179.884l-25.827-23.063-52.623%2020.224-7.16%2029.548-27.519%20124.838%2089.36%2038.929%2011.089-14.317c15.3-31.38%2023.88-66.64%2023.88-103.91%200-25.189-3.94-49.459-11.2-72.249z%22%20fill=%22#fe7d43%22/%3E%3Cpath%20d=%22M370.7%20316.284l-31.362%2015.148-80.628%2056.792%2035.935%2080.173%2025.655%206.357v.01c57.33-21.32%20103.462-64.83%20130.042-119.38z%22%20fill=%22#ee6161%22/%3E%3Cpath%20d=%22M289.59%20390.514l-17.107-11.991-102.233-15.526-49.118%2078.911%2022.609%2028.476v.01c28.76%2012.37%2060.45%2019.22%2093.74%2019.22%2029.13%200%2057.03-5.24%2082.82-14.85v-.01z%22%20fill=%22#c2a1d5%22/%3E%3Cpath%20d=%22M174.961%20360.978l-56.824-89.264-99.147%2030.675v42.954c23.93%2056.03%2068.79%20100.99%20124.75%20125.05v-.01l35.93-82.16z%22%20fill=%22#8ac9fe%22/%3E%3Cpath%20d=%22M41.982%20138.94L15.06%20168.774h-.01C5.32%20194.714%200%20222.804%200%20252.134c0%2033.09%206.77%2064.59%2018.99%2093.21H19l82.71-34.64%2010.814-24.84%206.493-122.186z%22%20fill=%22#75cdd5%22/%3E%3Cpath%20d=%22M181.916%2038.284H134.08c-54.62%2026.46-97.57%2073.22-119.03%20130.49h.01l83.75%2032.02%2054.76-27.722%2072.418-65.143z%22%20fill=%22#6cf5c2%22/%3E%3Cpath%20d=%22M378.15%20206.594l-4.387-19.506-54.061%2013.706-2.912%2024.95c2.77%208.29%204.26%2017.17%204.26%2026.39%200%2012.76-2.86%2024.84-7.97%2035.65l1.17%2019.907%2035.323%2018.797%2021.126-10.204c9.36-19.4%2014.61-41.16%2014.61-64.15a147.73%20147.73%200%200%200-7.159-45.54z%22%20fill=%22#fd6930%22/%3E%3Cpath%20d=%22M313.08%20287.784c-9.13%2019.33-25.45%2034.59-45.51%2042.33l-7.711%2014.505%2016.073%2041.16%2013.658%204.735c35.63-13.42%2064.7-40.19%2081.11-74.23z%22%20fill=%22#e94444%22/%3E%3Cpath%20d=%22M267.57%20330.114c-9.33%203.61-19.48%205.59-30.09%205.59-11.36%200-22.18-2.26-32.05-6.38l-16.865%201.828-20.06%2040.896%2011.165%2016.176c17.76%207.56%2037.3%2011.74%2057.81%2011.74%2018.34%200%2035.9-3.34%2052.11-9.45z%22%20fill=%22#a274bf%22/%3E%3Cpath%20d=%22M161%20285.864l-13.195-9.541-43.061%2014.922-3.034%2019.459c15.03%2034.81%2043.05%2062.68%2077.96%2077.52l25.76-58.9c-19.81-8.22-35.78-23.87-44.43-43.46z%22%20fill=%22#26a6fe%22/%3E%3Cpath%20d=%22M351.33%2043.684c-33.8-18.5-72.6-29.03-113.85-29.03-37.07%200-72.15%208.49-103.4%2023.63l38.51%2081%2038.259%2017.158%20120.38%2020.38%2035.027-74.33z%22%20fill=%22#fee97d%22/%3E%3Cpath%20d=%22M499.882%20161.534c1.19%203.43-.71%207.16-4.17%208.24l-32.4%2010.11-61.37%2019.15c-13.72-42.64-43.5-78.07-82.24-99.15l31.18-56.2%2016.5-29.74c1.74-3.15%205.74-4.26%208.85-2.45%2057.36%2033.25%20101.73%2086.42%20123.65%20150.04z%22%20fill=%22#fec165%22/%3E%3Cpath%20d=%22M153.91%20252.134c0-9.97%201.74-19.53%204.95-28.39l-.738-34.835h-35.835L98.81%20200.794c-5.92%2015.99-9.16%2033.29-9.16%2051.34%200%2020.81%204.3%2040.61%2012.06%2058.57l59.29-24.84c-4.56-10.31-7.09-21.72-7.09-33.73z%22%20fill=%22#2abcc8%22/%3E%3Cpath%20d=%22M202.588%20128.977l-29.999-9.694c-33.93%2016.58-60.56%2045.79-73.78%2081.51l60.05%2022.95c7.32-20.26%2022.24-36.88%2041.33-46.41v-.01l13.756-15.489z%22%20fill=%22#00f2a6%22/%3E%3Cpath%20d=%22M307.84%20122.084l-.013-.002c-20.919-11.339-44.878-17.778-70.347-17.778-23.28%200-45.3%205.38-64.89%2014.98l27.6%2058.05a83.3%2083.3%200%200%201%2037.29-8.77c14.16%200%2027.49%203.52%2039.17%209.74l21.032%201.035%2020.579-27.438z%22%20fill=%22#fedf30%22/%3E%3Cpath%20d=%22M401.942%20199.034l-24.24%207.56-60.912%2019.15c-6.81-20.49-21.686-37.633-40.486-47.623l31.088-56.037%2012.31-22.2c38.74%2021.08%2068.52%2056.51%2082.24%2099.15z%22%20fill=%22#fdb441%22/%3E%3C/svg%3E"
  },
  "design": {
    "board": "Python3-Noetic",
    "graph": {
      "blocks": [


        {
          "id": "Inp-0",
          "type": "basic.input",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },

        {
          "id": "Inp-1",
          "type": "basic.input",
          "data": {
            "name": "E",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },


        {
          "id": "Out-0",
          "type": "basic.output",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 752,
            "y": 144
          }
        },
        
       {
          "id": "300",
          "type": "basic.code",
          "data": {
            "code": "import cv2 as cv\nimport numpy as np\nfrom time import sleep\nfrom utils.wires.wire_img import share_image, read_image\nfrom utils.wires.wire_str import read_string\nfrom utils.tools.freq_monitor import monitor_frequency\n\ndef loop(block_name, input_wires, output_wires, parameters, flags):\n\n    input_0 = read_image(input_wires[0])\n    output_0 = share_image(output_wires[0])\n    lower_range = np.array([int(x.strip()) for x in parameters[1].split(',')])\n    upper_range = np.array([int(x.strip()) for x in parameters[2].split(',')])\n\n    enabled = False\n    try:\n        enable_wire = read_string(input_wires[1])\n    except IndexError:\n        enabled = True\n    \n    required_frequency, update = float(parameters[0]), 1\n    control_data = np.array([0.0,0.03])\n    \n    if flags[0] == 1:\n        monitor_frequency(block_name, control_data, required_frequency, update)\n\n    try:\n        while True:\n        \n            if enabled or (update := bool(enable_wire.get()[0])):\n    \n                frame = input_0.get()\n                \n                if frame is not None:\n        \n                    hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)\n                    mask = cv.inRange(hsv, lower_range, upper_range)\n                    filtered = cv.bitwise_and(frame,frame, mask= mask)\n    \n                    output_0.add(filtered)\n    \n                control_data[0] += 1\n                \n            sleep(control_data[1])\n            \n    except KeyboardInterrupt: \n    \n        input_0.release()\n        enable_wire.release()\n        output_0.release()",
            "params": [],
            "ports": {
              "in": [
                {
                  "name": "Inp-0"
                }
              ],
              "out": [
                {
                  "name": "Out-0"
                }
              ]
            }
          },
          "position": {
            "x": 50,
            "y": 100
          },
          "size": {
            "width": 800,
            "height": 600
          }
        },
        
        {
          "id": "400",
          "type": "basic.constant",
          "data": {
            "name": "Frequency",
            "value": "30.0",
            "local": true
          },
          "position": {
            "x": 300,
            "y": 10
          }
        },
        
        {
          "id": "401",
          "type": "basic.constant",
          "data": {
            "name": "Lower RGB Range", 
            "value": "40,50,0",
            "local": true
          },
          "position": {
            "x": 400,
            "y": 10
          }
        },
        
        {
          "id": "402",
          "type": "basic.constant",
          "data": {
            "name": "Upper RGB Range",
            "value": "140,255,255",
            "local": true
          },
          "position": {
            "x": 500,
            "y": 10
          }
        }    
        
      ],

      "wires": [
        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "",
            "port": ""
          }
        },

        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "",
            "port": ""
          }
        }
      ]
    }
  },
  "dependencies": {}
}
